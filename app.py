import time
import threading
import random
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException

# Danh s√°ch c√°c c·ªïng debug c·ªßa Chrome
DEBUG_PORTS = [
    "127.0.0.1:9222",
    "127.0.0.1:9223",
    "127.0.0.1:9224",
    "127.0.0.1:9225",
    "127.0.0.1:9226",
    "127.0.0.1:9227"]

# Danh s√°ch User-Agent ng·∫´u nhi√™n
USER_AGENTS = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36",
    "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.1 Safari/605.1.15"
]

# Danh s√°ch trang web c·∫ßn x·ª≠ l√Ω
URLS = [
    "https://fmcpay.com/dashboard",
    "https://fmcpay.com/markets",
    "https://fmcpay.com/stakings",
    "https://fmcpay.com/exchange",
    "https://fmcpay.com/wallet/spot"
]

# Th·ªùi gian ch·ªù (gi√¢y)
PAGE_LOAD_DELAY = 5
CAPTCHA_DELAY = 10
CLICK_DELAY = 3
CYCLE_DELAY = 210  # Chu k·ª≥ l·∫∑p l·∫°i, c√≥ th·ªÉ ƒë·ªïi th√†nh 320 n·∫øu c·∫ßn
THREAD_START_DELAY = 30  # ƒê·ªô tr·ªÖ gi·ªØa c√°c lu·ªìng

def initialize_driver(port, user_agent):
    """Kh·ªüi t·∫°o tr√¨nh duy·ªát Chrome v·ªõi c·ªïng debug v√† User-Agent."""
    chrome_options = webdriver.ChromeOptions()
    chrome_options.debugger_address = port
    chrome_options.add_argument(f'--user-agent={user_agent}')
    return webdriver.Chrome(options=chrome_options)

def handle_captcha(driver, port):
    """X·ª≠ l√Ω Cloudflare CAPTCHA n·∫øu c√≥."""
    try:
        captcha_iframe = driver.find_element(By.XPATH, '//iframe[contains(@title, "Cloudflare security challenge")]')
        driver.switch_to.frame(captcha_iframe)
        checkbox_element = driver.find_element(By.XPATH, '//input[@type="checkbox"]')
        checkbox_element.click()
        print(f"‚úÖ Click v√†o checkbox Cloudflare th√†nh c√¥ng tr√™n c·ªïng {port}!")
        time.sleep(CAPTCHA_DELAY)
        driver.switch_to.default_content()
    except NoSuchElementException:
        print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y Cloudflare CAPTCHA tr√™n c·ªïng {port}, ti·∫øp t·ª•c...")

def click_gift_image(driver, port):
    """T√¨m v√† click v√†o ·∫£nh gift.svg."""
    try:
        img_element = driver.find_element(By.XPATH, '//img[@src="/assets/gift.svg"]')
        div_element = img_element.find_element(By.XPATH, './parent::div')
        div_element.click()
        print(f"üéâ Click v√†o ·∫£nh th√†nh c√¥ng tr√™n c·ªïng {port}!")
        time.sleep(CLICK_DELAY)
    except NoSuchElementException:
        print(f"‚è© Kh√¥ng t√¨m th·∫•y ·∫£nh tr√™n c·ªïng {port}, b·ªè qua...")

def process_url(driver, url, port):
    """X·ª≠ l√Ω m·ªôt URL c·ª• th·ªÉ."""
    try:
        print(f"\nüöÄ ƒêang m·ªü trang: {url} tr√™n c·ªïng {port}")
        driver.get(url)
        time.sleep(PAGE_LOAD_DELAY)
        handle_captcha(driver, port)
        click_gift_image(driver, port)
    except Exception as e:
        print(f"‚ùå L·ªói khi x·ª≠ l√Ω trang {url} tr√™n c·ªïng {port}: {str(e)}")

def process_chrome_instance(port, user_agent, initial_delay):
    """H√†m x·ª≠ l√Ω t·ª´ng instance Chrome v·ªõi ƒë·ªô tr·ªÖ ban ƒë·∫ßu."""
    try:
        # Th√™m ƒë·ªô tr·ªÖ ban ƒë·∫ßu ƒë·ªÉ c√°c lu·ªìng ch·∫°y c√°ch nhau
        print(f"\n‚è≥ ƒê·ª£i {initial_delay} gi√¢y tr∆∞·ªõc khi kh·ªüi ƒë·ªông c·ªïng {port}...")
        time.sleep(initial_delay)

        print(f"\nüåê K·∫øt n·ªëi t·ªõi Chrome t·∫°i c·ªïng {port}...")
        driver = initialize_driver(port, user_agent)
        while True:
            print(f"\n‚è≥ B·∫Øt ƒë·∫ßu chu tr√¨nh m·ªõi cho c·ªïng {port}...")
            for url in URLS:
                process_url(driver, url, port)
            print(f"\nüîÑ ƒê·ª£i {CYCLE_DELAY} gi√¢y tr∆∞·ªõc khi ch·∫°y l·∫°i tr√™n c·ªïng {port}...")
            time.sleep(CYCLE_DELAY)
    except Exception as e:
        print(f"‚ùå L·ªói khi k·∫øt n·ªëi t·ªõi Chrome t·∫°i c·ªïng {port}: {str(e)}")
    finally:
        try:
            driver.quit()
        except:
            pass

def main():
    """H√†m ch√≠nh ƒë·ªÉ kh·ªüi ƒë·ªông c√°c lu·ªìng v·ªõi ƒë·ªô tr·ªÖ gi·ªØa ch√∫ng."""
    threads = []

    for i, port in enumerate(DEBUG_PORTS):
        user_agent = random.choice(USER_AGENTS)
        initial_delay = i * THREAD_START_DELAY  # ƒê·ªô tr·ªÖ tƒÉng d·∫ßn: 0s, 30s, 60s, ...
        thread = threading.Thread(target=process_chrome_instance, args=(port, user_agent, initial_delay))
        threads.append(thread)
        thread.start()

    for thread in threads:
        thread.join()

if __name__ == "__main__":
    main()